import java.util.*;
public class Main {
    public static void main(String[] args) {
        HashMap<String,String>map = new HashMap<>();
        
        //insertion
        map.put("TN","Tamilnadu");
        map.put("AD","Andhra");
        map.put("KL","Kerala");
        
        //search   
        System.out.println(map.get("TN"));
        System.out.println(map.get("AD"));
        System.out.println(map.getOrDefault("AP","Not found"));
        
        // remove
        map.remove("TN");
        
        for(String key : map.keySet()){
           System.out.println(key + " " +map.get(key));
        }
        
            
            System.out.println(map.containsKey("AP"));
            System.out.println(map.containsValue("Tamilnadu"));
            
             System.out.println(map.size()); 
        
               map.remove("TN");
               map.remove("AD");
        
             System.out.println(map.isEmpty());
        }
    }
class Solution {
    public int[] findIntersectionValues(int[] nums1, int[] nums2) {
         HashSet<Integer> s1 = new HashSet<>();
       HashSet<Integer> s2 = new HashSet<>();
        for (int n : nums1) {
            s1.add(n);
        }
        for (int n : nums2) {
            s2.add(n);
        }
        int c=0;
        int c1=0;
        for(int i:nums1){
            if(s2.contains(i)){
                c++;
            }
        }
        for(int i:nums2){
            if(s1.contains(i)){
                c1++;
            }
        }
        return new int[]{c, c1};
    }
}
class Solution {
    public boolean containsDuplicate(int[] nums) {
        Set<Integer> set = new HashSet<>();

        for(int i : nums){
            set.add(i);

        }
        if(nums.length == set.size()){
            return false;
        }
    return true;
}
}
class Solution {
    public List<Integer> findDuplicates(int[] nums) {
       
         HashMap<Integer,Integer> map = new HashMap<>();
         for (int i: nums){
         if(map.containsKey(i)){
            int count = map.get(i);
            map.put(i,count+1);
        }else{
            map.put(i,1);

        }  }
        List<Integer> duplicates = new ArrayList<>();
        for(int i: map.keySet()){
            if(map.get(i)==2){
                duplicates.add(i);
            }
        }
        return duplicates;
        }
       }
class Solution {
    public int firstMissingPositive(int[] nums) {
        Set<Integer> set = new HashSet<>();

        for(int i: nums){
            set.add(i);
        }
          int var = 1;
          
       while(set.contains(var)){
            var++;

        }  
         return var;
    }
}





    

        
    

            
            
